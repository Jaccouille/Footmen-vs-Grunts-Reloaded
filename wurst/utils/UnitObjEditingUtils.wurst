package UnitObjEditingUtils

import UnitObjEditing
import ErrorHandling
import HashMap
import ObjectIds

import CommonUtils
import LocalAssets
import SpawnDataConstant
import StringExtensions
import ColorUtils
import TooltipsUtils

import UnitObjEditingExt
import UnitTooltipGenerator

constant SPAWN_STR = "" +
    "Spawn period(seconds): {0}\n".color(GOLD_COLOR) +
    "Max unit count: {1}".color(GOLD_COLOR)

public function createSpawnedUnit(int newId, int origId) returns UnitExt
    UnitTooltipGenerator tgen
    if spawnDataConstant.has(newId)
        tgen = new UnitTooltipGenerator(SPAWN_STR.format(
            spawnDataConstant.get(newId).spawnPeriod.toString().color(COLOR_LIGHT_BLUE),
            spawnDataConstant.get(newId).unitCap.toString().color(COLOR_LIGHT_BLUE)
        ))
    else
        tgen = new UnitTooltipGenerator()
    return new UnitExt(newId, origId, tgen)
        ..setDeathTimeseconds(1.0)
        ..setBuildTime(1)
        ..setAttack1DamageSidesperDie(1)
        ..setAttack1DamageNumberofDice(1)
        ..setAttack2DamageSidesperDie(1)
        ..setAttack2DamageNumberofDice(1)
        ..setFoodCost(0)
        ..setLumberBountyAwardedBase(1)
        ..setLumberCost(0)
        ..setRequirements("")


public function createSiegeUnit(int newId, int origId) returns UnitDefinition
    return createSpawnedUnit(newId, origId)
        ..setAcquisitionRange(1150)
        ..setAttack1AreaofEffectTargets(commaList(
            TargetsAllowed.debris,
            TargetsAllowed.enemies,
            TargetsAllowed.ground,
            TargetsAllowed.structure,
            TargetsAllowed.wall
        ))
        ..setAttack1TargetsAllowed(commaList(
            TargetsAllowed.ground,
            TargetsAllowed.debris,
            TargetsAllowed.tree,
            TargetsAllowed.wall,
            TargetsAllowed.item_t,
            TargetsAllowed.ward
        ))
        ..setAttack1WeaponType(WeaponType.Artillery)
        ..setAttack1DamageSpillRadius(0)
        ..setAttack1AreaofEffectMediumDamage(150)
        ..setAttack1AreaofEffectSmallDamage(250)
        ..setAttack1DamageFactorMedium(0.250)
        ..setAttack1DamageFactorSmall(0.100)
        ..setAttack1DamageLossFactor(0)
        ..setAttack1DamageSidesperDie(11)
        ..setAttack2AreaofEffectFullDamage(0)
        ..setAttack2AreaofEffectMediumDamage(0)
        ..setAttack2AreaofEffectSmallDamage(0)
        ..setAttack2CooldownTime(3.5)
        ..setAttack2DamageFactorMedium(0)
        ..setAttack2DamageFactorSmall(0)
        ..setAttack2DamageLossFactor(0)
        ..setAttack2DamageSpillRadius(0)
        ..setAttack2DamageUpgradeAmount(1)
        ..setAttack2TargetsAllowed(TargetsAllowed.structure)
        ..setAttack2WeaponType(WeaponType.Missile)
        ..setAttack2DamageSidesperDie(11)
        ..setAttack2Range(1000)
        ..setRepairCommon(30)
        ..setHitPointsRegenerationRate(0.250)
        ..setHitPointsRegenerationType("always")
        ..setUnitClassification(UnitClasses.mechanical)

public function UnitDefinition.setRepairCommon(int repairTime)
    this.setRepairTime(repairTime)
    this.setRepairGoldCost(0)
    this.setRepairLumberCost(0)

public function UnitDefinition.setHitPointRegeBasic()
    this.setHitPointsRegenerationRate(0.250)
    this.setHitPointsRegenerationType("always")

public function UnitDefinition.setHotkeyEnhance(string hotkey)
    if not hotKeyMapping.has(hotkey)
        error("Hotkey button position mapping has no \"{0}\" element".format(hotkey))
        return
    this.setHotkey(hotkey)
    this.setButtonPositionX(hotKeyMapping.get(hotkey).x)
    this.setButtonPositionY(hotKeyMapping.get(hotkey).y)

public function UnitDefinition.setGoldData(int data)
    this.setGoldCost(data)
    this.setPointValue(data)

public function UnitDefinition.setNameEnhance(string hotkey, string name)
    this.setHotkeyEnhance(hotkey)
    this.setName(name)
    this.setTooltipBasic(makeToolTipNorm(hotkey, "Recruit " + name))
