package UnitObjEditingExt

import UnitObjEditing
import ObjEditingNatives

/** Configure this variable to `false` if you don't want the
	property names to have spaces. */
@configurable constant USE_PROPERTY_SPACING = true
@configurable constant ATTACK_UPGD_LVL = 10
@configurable constant DEFENSE_UPGD_LVL = 5

public interface TooltipGenerator
    function addProperty(string title, string value, string bonusValue, int lvls)
    function applyToDef(UnitOrHeroDefinition def)

public class UnitExt extends UnitDefinition
    TooltipGenerator tooltipGen = null
    boolean listen = false

    construct(int newId, int origId, TooltipGenerator tgen)
        super(newId, origId)
        registerTooltipGenerator(tgen)

    function addTooltipProperty(string pName, string value, string bonus, int lvls)
        if tooltipGen != null and listen
            if USE_PROPERTY_SPACING
                tooltipGen.addProperty(pName, value, bonus, lvls)
            else
                tooltipGen.addProperty(pName.replace(" ", ""), value, bonus, lvls)

    function addTooltipProperty(string pName, int value, int bonus, int lvls)
        let bonusStr = bonus == 0 ? "" : bonus.toString()
        addTooltipProperty(pName, value.toString(), bonusStr, lvls)

    function addTooltipProperty(string pName, real value, int bonus, int lvls)
        var s = value.toString()
        s = s.endsWith(".0") ? s.substring(0, s.length() - 2) : s
        let bonusStr = bonus == 0 ? "" : bonus.toString()
        addTooltipProperty(pName, s, bonusStr, lvls)

    function registerTooltipGenerator(TooltipGenerator tgen)
        tooltipGen = tgen

    function tooltipStartListen()
        listen = true

    function tooltipStopListen()
        tooltipStopListen(true)

    function tooltipStopListen(boolean build)
        listen = false
        if tooltipGen != null and build
            tooltipGen.applyToDef(this)

    function setAttack1AttackTypeExt(AttackType data)
        let dataStr = data.toObjectString()
        def.setString("ua1t", dataStr)
        addTooltipProperty("Attack Type", dataStr.firstUpper(), "", 0)

    function setAttack1DamageBaseExt(int data)
        setAttack1DamageBaseExt(data, 0, 0)

    function setAttack1DamageBaseExt(int data, int bonus, int lvls)
        def.setInt("ua1b", data)
        def.setInt("udu1", bonus)
        addTooltipProperty("Damage", data, bonus, lvls)

    function setAttack1CooldownTimeExt(real data)
        setAttack1CooldownTimeExt(data, 0, 0)

    function setAttack1CooldownTimeExt(real data, int bonus, int lvls)
        def.setUnreal("ua1c", data)
        addTooltipProperty("Attack Speed", data, bonus, lvls)

    function setHitPointsMaximumBaseExt(int data)
        setHitPointsMaximumBaseExt(data, 0, 0)

    function setHitPointsMaximumBaseExt(int data, int bonus, int lvls)
        def.setInt("uhpm", data)
        addTooltipProperty("Health Point", data, bonus, lvls)

    function setDefenseBaseExt(int data)
        setDefenseBaseExt(data, 0, 0)

    function setDefenseBaseExt(int data, int bonus, int lvls)
        def.setInt("udef", data)
        def.setInt("udup", data)
        addTooltipProperty("Defense", data, bonus, lvls)

    function setArmorTypeExt(ArmorType data)
        let dataStr = data.toObjectString()
        def.setString("udty", dataStr)
        addTooltipProperty("Defense Type", dataStr.firstUpper(), "", 0)

    function setSpeedBaseExt(int data)
        setSpeedBaseExt(data, 0, 0)

    function setSpeedBaseExt(int data, int bonus, int lvls)
        def.setInt("umvs", data)
        addTooltipProperty("Movement Speed", data, bonus, lvls)

    function setAttack1RangeExt(int data)
        setAttack1RangeExt(data, 0, 0)

    function setAttack1RangeExt(int data, int bonus, int lvls)
        def.setInt("ua1r", data)
        addTooltipProperty("Range", data, bonus, lvls)

    function setManaExt(int data)
        setManaExt(data, 0, 0)

    function setManaExt(int data, int bonus, int lvls)
        def.setInt("umpm", data)
        def.setInt("umpi", data)
        addTooltipProperty("Mana", data, bonus, lvls)
