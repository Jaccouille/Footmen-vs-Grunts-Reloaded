package ControlTowerAbilities

import ChannelAbilityPreset
import ClosureEvents
import OrderIds
import Assets

import PlayerExtension
import LocalObjectIDs
import TooltipsUtils
import LocalAssets
import AbilityObjEditingUtils


function createControlTowerAbility(int abilId) returns ChannelAbilityPreset
    return new ChannelAbilityPreset(abilId, 1, true)
        ..setDummyAbility()
        ..setCastingTime(1, 0)


@compiletime function createMoveOrder()
    createControlTowerAbility(ABILITY_ARMY_MOVE)
        ..setIconNormal(LocalIcons.bTNMove)
        ..presetTargetTypes(Targettype.POINT)
        ..presetOption(Option.VISIBLE, true)
        ..setNameEnhance("W", "Army Move Order")

@compiletime function createStopOrder()
    createControlTowerAbility(ABILITY_ARMY_STOP)
        ..setIconNormal(LocalIcons.bTNStopAlternate)
        ..presetTargetTypes(Targettype.NONE)
        ..setNameEnhance("S", "Army Stop Order")

@compiletime function createHoldOrder()
    createControlTowerAbility(ABILITY_ARMY_HOLD)
        ..setIconNormal(LocalIcons.bTNHoldPosition)
        ..presetTargetTypes(Targettype.NONE)
        ..setNameEnhance("E", "Army Hold Order")

@compiletime function createMassAttackOrder()
    createControlTowerAbility(ABILITY_MASS_ATTACK)
        ..setIconNormal(Icons.bTNMove)
        ..presetTargetTypes(Targettype.NONE)
        ..setNameEnhance("R", "Mass Attack Order")

@compiletime function createAttackPointOrder()
    createControlTowerAbility(ABILITY_ARMY_ATTACK)
        ..setIconNormal(Icons.bTNAttackGround)
        ..presetTargetTypes(Targettype.POINT)
        ..presetOption(Option.VISIBLE, true)
        ..setNameEnhance("Q", "Army Attack Order")

@compiletime function createAttackTargetOrder()
    createControlTowerAbility(ABILITY_ARMY_FOCUS)
        ..setIconNormal(LocalIcons.bTNFocus)
        ..presetTargetTypes(Targettype.UNIT)
        ..presetOption(Option.VISIBLE, true)
        ..setNameEnhance("A", "Army Focus Order")

@compiletime function createStandByOrder()
    createControlTowerAbility(ABILITY_UNIT_STANDBY)
        ..setIconNormal(Icons.bTNCryptFiendBurrow)
        ..presetTargetTypes(Targettype.UNIT)
        ..presetOption(Option.VISIBLE, true)
        ..setNameEnhance("D", "Unit Standby Order")
        ..setTargetsAllowed(1, TargetsAllowed.player_t)

@compiletime function createToggleSpawn()
    createControlTowerAbility(ABILITY_TOGGLE_SPAWN)
        ..setIconNormal(Icons.bTNCancel)
        ..presetTargetTypes(Targettype.UNIT)
        ..presetOption(Option.VISIBLE, true)
        ..setNameEnhance("F", "Unit Toggle Spawn")
        ..setTargetsAllowed(1, TargetsAllowed.player_t)

@compiletime function createSetSpawn()
    createControlTowerAbility(ABILITY_SET_SPAWN)
        ..setIconNormal(Icons.bTNMassTeleport)
        ..presetTargetTypes(Targettype.UNIT)
        ..presetOption(Option.VISIBLE, true)
        ..presetOption(Option.PHYSICALSPELL, true)
        ..presetOption(Option.UNIVERSALSPELL, true)
        ..setNameEnhance("V", "Unit Set Spawn")
        ..setTargetsAllowed(1, commaList(
            TargetsAllowed.vulnerable,
            TargetsAllowed.invulnerable,
            TargetsAllowed.structure,
            TargetsAllowed.friend
            ))

@compiletime function createToggleAutoSend()
    createControlTowerAbility(ABILITY_AUTO_SEND)
        ..setIconNormal(Icons.bTNSelectUnit)
        ..presetTargetTypes(Targettype.NONE)
        ..presetOption(Option.VISIBLE, true)
        ..setNameEnhance("Z", "Toggle Auto Send")


function onPoint(unit caster, int orderId, vec2 targetPos)
    let owner = caster.getOwner()

    owner.getArmyHandler()
        ..updateSpawnOrder(orderId, targetPos)
        ..issueOrderById(orderId, targetPos)

function onCast(unit caster, int orderId)
    let owner = caster.getOwner()

    owner.getArmyHandler().issueOrderById(orderId)

function onTargetCast(unit caster, unit target)
    let owner = caster.getOwner()
    let abilId = EventData.getSpellAbilityId()

    // TODO: refactor previous into this switch
    switch abilId
        case ABILITY_TOGGLE_SPAWN
            owner.getUnitSpawner().toggleSpawn(target.getTypeId())
        case ABILITY_SET_SPAWN
            owner.getUnitSpawner().spawningPos = target.getPos()
        case ABILITY_ARMY_FOCUS
            owner.getArmyHandler()
                ..updateSpawnOrder(OrderIds.smart, target)
                ..issueOrderById(OrderIds.smart, target)
        case ABILITY_UNIT_STANDBY
            owner.getArmyHandler().updateOrderGroup(target.getTypeId())


init
    EventListener.onPointCast(ABILITY_ARMY_MOVE, (unit caster, vec2 target) -> onPoint(caster, OrderIds.move, target))
    EventListener.onPointCast(ABILITY_ARMY_ATTACK, (unit caster, vec2 target) -> onPoint(caster, OrderIds.attack, target))

    EventListener.onCast(ABILITY_ARMY_STOP, (unit caster) -> onCast(caster, OrderIds.stop))
    EventListener.onCast(ABILITY_ARMY_HOLD, (unit caster) -> onCast(caster, OrderIds.holdposition))
    EventListener.onCast(ABILITY_MASS_ATTACK) (unit caster) ->
        let owner = EventData.getTriggerPlayer()
        // Target opposite side of spawning position
        let targetPos = owner.getUnitSpawner().spawningPos.op_mult(vec2(-1, 1))
        onPoint(caster, OrderIds.attack, targetPos)

    EventListener.onTargetCast(ABILITY_UNIT_STANDBY, (unit caster, unit target) -> onTargetCast(caster, target))
    EventListener.onTargetCast(ABILITY_TOGGLE_SPAWN, (unit caster, unit target) -> onTargetCast(caster, target))
    EventListener.onTargetCast(ABILITY_SET_SPAWN, (unit caster, unit target) -> onTargetCast(caster, target))
    EventListener.onTargetCast(ABILITY_ARMY_FOCUS, (unit caster, unit target) -> onTargetCast(caster, target))
