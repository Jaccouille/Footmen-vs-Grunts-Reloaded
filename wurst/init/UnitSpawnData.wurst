package UnitSpawnData

import ClosureEvents
import LinkedList

import Lodash

import PlayerExtension
import SpawnDataConstant
import UnitExtension
import StringExtensions
import ColorUtils

public tuple unitCounter(int current, int max)

/**
    Move first element to last element position
*/
function LinkedList<T>.firstToLast<T>()
    let first = this.dequeue()
    this.push(first)


public class UnitSpawnData
    int unitId
    int abilId
    int period
    unitCounter spawnCounter = unitCounter(0, 0)
    var toggleOption = new LinkedList<Pair<string, int>>

    construct(int unitId, int abilId)
        let period = spawnDataConstant.get(unitId).spawnPeriod
        let unitCap = spawnDataConstant.get(unitId).unitCap
        standardInit(unitId, abilId, period, unitCap)
        enableTrainingListener()

    construct(int unitId, int abilId, int period, int unitCap)
        standardInit(unitId, abilId, period, unitCap)
        enableTrainingListener()

    construct(int unitId, int abilId, int period, unitCounter spawnCounter)
        standardInit(unitId, abilId, period, spawnCounter.max)
        this.spawnCounter = spawnCounter

    function standardInit(int unitId, int abilId, int period, int unitCap)
        this.unitId = unitId
        this.abilId = abilId
        this.period = period
        this.spawnCounter.max = unitCap
        toggleOption.push(new Pair("ON", 1))
        toggleOption.push(new Pair("OFF", 0))

    function copy() returns UnitSpawnData
        let copy = new UnitSpawnData(unitId, abilId, period, spawnCounter)
        toggleOption.forEach() (Pair<string, integer> t) ->
            if t.a != "ON" and t.a != "OFF"
                copy.addSpawnOrder(t.a, t.b)
        return copy

    function enableTrainingListener()
        EventListener.add(EVENT_PLAYER_UNIT_TRAIN_FINISH) ->
            let trainer = EventData.getTriggerUnit()
            let trained = EventData.getTrainedUnit()
            let owner = trainer.getOwner()

            if unitId == trained.getTypeId()
                trained.remove()
                if owner.getUnitSpawner().countTemplateUnitId(unitId) >= this.spawnCounter.max
                    SetPlayerTechMaxAllowed(owner, trained.getTypeId(), 0)
                    owner.addGold(trained.getPointValue())
                else
                    owner.getUnitSpawner().addUnitSpawner(this.copy())

    function addSpawnOrder(string mode, int orderId)
        let idx = toggleOption.size() - 1
        toggleOption.addAt(new Pair(mode, orderId), idx)

    // TODO: test spawn order with researched abilities
    function addSpawnOrder(string mode, int orderId, int researchId)
        EventListener.add(EVENT_PLAYER_UNIT_UPGRADE_FINISH) ->
            if researchId == EventData.getResearchedType()
                let owner = EventData.getResearchingUnit().getOwner()
                if owner.getUnitSpawner().hasSpawnData(this)
                    let idx = toggleOption.size() - 1
                    toggleOption.addAt(new Pair(mode, orderId), idx)
                    while toggleOption.getFirst().a != mode
                        toggleOption.firstToLast()

    function onToggle() returns string
        toggleOption.firstToLast()
        return toggleOption.getFirst().a

    function getCurrentOrder() returns int
        return toggleOption.getFirst().b

    function canSpawn() returns boolean
        return (spawnCounter.current < spawnCounter.max and toggleOption.getFirst().a != "OFF")

    function getCurrentOptionColored() returns string
        var option = toggleOption.getFirst().a
        if option == "ON"
            option = option.color(COLOR_GREEN)
        else if option == "OFF"
            option = option.color(COLOR_RED)
        else
            option = option.color(GOLD_COLOR)
        return option
