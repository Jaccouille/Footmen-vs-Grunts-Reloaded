package PlayerData

import HashMap
import LinkedList
import ClosureTimers
import ClosureEvents

import Indicators
import GameConstants


function player.getPlayerData() returns PlayerData
    return PlayerData.getPlayerData(this)

public enum ScoreType
    UNITKILL
    HEROKILL
    UNITDEATH
    HERODEATH
    GAIN
    FEED

public var TOTAL_GAIN = 0
public var TOTAL_FEED = 0

public class FactionData
    static let playerToFactionMap = new HashMap<player, thistype>
    static let factions = new LinkedList<thistype>

    let members = new LinkedList<player>

    static function ofPlayer(player query) returns thistype
        if playerToFactionMap.has(query)
            return playerToFactionMap.get(query)
        return null

    static function getTotalScore(ScoreType scoreType) returns int
        var sum = 0
        for faction in factions
            sum += faction.getScore(scoreType)
        return sum

    player _player

    construct(player _player)
        this._player = _player
        factions.push(this)
        this.members.push(_player)

    function addMember(player _player)
        this.members.push(_player)
        playerToFactionMap.put(_player, this)

    function removeMember(player _player)
        this.members.remove(_player)
        playerToFactionMap.remove(_player)

    function getScore(ScoreType scoreType) returns int
        var sum = 0
        for member in members
            if member != this._player
                sum += member.getPlayerData().getScore(scoreType)
        return sum


public class PlayerData
    private static let playerDataMap = new HashMap<player, thistype>

    static function getPlayerData(player _player) returns thistype
        if playerDataMap.has(_player)
            return playerDataMap.get(_player)
        return null

    static function removePlayerData(player _player)
        if playerDataMap.has(_player)
            destroy playerDataMap.getAndRemove(_player)

    let playerBuilding = new IterableMap<int, unit>

    // Player income
    real income = 5.

    // Value of a player relative to the other player
    // playerValue = 100 * playerGain / total gain
    real playerValue = 0

    // tax used to compute lumber bounty
    // the higher the player value, the lower the tax
    // tax = playerValue * (- 1 / 100) + 1
    real goldFactorTax = 1

    let score = new HashMap<ScoreType, int>
    player _player

    construct(player _player)
        this._player = _player
        score..put(ScoreType.UNITKILL, 0)
             ..put(ScoreType.HEROKILL, 0)
             ..put(ScoreType.UNITDEATH, 0)
             ..put(ScoreType.HERODEATH, 0)
             ..put(ScoreType.GAIN, 0)
             ..put(ScoreType.FEED, 0)

        playerDataMap.put(_player, this)

    function addBuilding(unit building)
        // Make sure the hashMap is empty
        // For some god only knows reason, player 5 already has building
        // but trying to get them result in wc3 crashing
        if playerBuilding.has(building.getTypeId())
            playerBuilding.remove(building.getTypeId())

        playerBuilding.put(building.getTypeId(), building)
        EventListener.add(building, EVENT_PLAYER_UNIT_DEATH) ->
            playerBuilding.remove(building.getTypeId())
            unregisterEventsForUnit(building)

    function getScore(ScoreType scoreType) returns int
        return score.get(scoreType)

    function addScore(ScoreType scoreType, int value)
        let currentVal = score.get(scoreType)
        let newVal = currentVal + value
        score.put(scoreType, newVal)

        let factionPlayer = FactionData.ofPlayer(this._player)._player
        if factionPlayer.getId() != this._player.getId()
            if scoreType == ScoreType.GAIN
                TOTAL_GAIN += value
            else if scoreType == ScoreType.FEED
                TOTAL_FEED += value
            factionPlayer.getPlayerData().addScore(scoreType, value)


    function updateTaxRate()
        // This linear equation is taken from Compit's Footmen vs Grunts
        // if playerValue > 40, tax = 0.6
        // if playerValue == 0, tax = 1
        this.goldFactorTax = (this.playerValue * (- 1 / 100) + 1)

    function updatePlayerValue()
        let totalGain = FactionData.getTotalScore(ScoreType.GAIN)
        if totalGain > 0
            this.playerValue = 100 * this.getScore(ScoreType.GAIN) / totalGain
        else
            this.playerValue = 0

// It's easier to place units on editor and then replace them with our
// Wurst defined units
function replaceIndicator()
    // Delay to ensure that all indicators are registered prior to execution.
    nullTimer() ->
        // Replace indicators one type at a time.
        indicators.forEach() (integer originID, integer targetID) ->
            // Find all matching indicators for the current type.
            ENUM_GROUP..clear().enumUnitsOfType(originID, null)

            // Replace each indicator with the corresponding unit.
            for origin in ENUM_GROUP
                // Extract the relevant information from the indicator.
                let owner = origin.getOwner()
                let pos   = origin.getPos()
                let angle = origin.getFacingAngle()

                // Remove the indicator once it is no longer needed.
                origin.remove()

                // Create the actual unit.
                let target = createUnit(owner, targetID, pos, angle)
                // TODO: add condition before accesing map
                if target.getOwner().getId() < 6
                    let pData = owner.getPlayerData()
                    pData.addBuilding(target)

                // TODO : for some reason this following code
                // crashes due to HotkeyMapping definition in CommonUtils.wurst
                // Find out why
                // Look up the callbacks for this indicator.
                // if indicatorCallbacks.has(targetID)
                //     let list = indicatorCallbacks.get(targetID)

                //     // Execute each callback, as necessary.
                //     if list != null
                //         list.forEach() (Callback cb) ->
                //             cb.run(target)

public let allianceFaction = new FactionData(ALLIANCE_PLAYER)
public let hordeFaction = new FactionData(HORDE_PLAYER)

public function initPlayerData()
    for i = 0 to NBR_USER_PLAYER
        new PlayerData(players[i])
        if i < 3
            allianceFaction.addMember(players[i])
        else
            hordeFaction.addMember(players[i])
    replaceIndicator()
