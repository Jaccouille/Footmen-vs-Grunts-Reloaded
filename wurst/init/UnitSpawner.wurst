package UnitSpawner

import Orders
import ClosureEvents
import HashMap
import ClosureTimers
import ClosureForGroups
import LinkedList

import PlayerExtension
import LocalObjectIDs

import initlater UnitSpawnData
import ArmyHandler
import SpawnDataConstant

public class UnitSpawner
    static let playerToSpawnerMap = new HashMap<player, UnitSpawner>

    static function initialize()
        for i = 0 to 9
            // TODO: check player isingame
            // if players[i].isIngame()
            let pData = players[i].getPlayerData()
            var initialSpawn = vec2(0, 0)
            UnitSpawnData firstSpawn = null

            // TODO: Init first spawn outside of this class
            if i < 5
                if pData.playerBuilding.has(UNIT_ALLIANCE_CASTLE)
                    initialSpawn = pData.playerBuilding.get(UNIT_ALLIANCE_CASTLE).getPos()
                let spawnData = spawnDataConstant.get(UNIT_FOOTMAN)
                firstSpawn = new UnitSpawnData(UNIT_FOOTMAN, ABILITY_TOGGLE_RIFLEMAN, spawnData.spawnPeriod, unitCounter(0, spawnData.unitCap))
            if i >= 5
                initialSpawn = pData.playerBuilding.get(UNIT_HORDE_CASTLE).getPos()
                let spawnData = spawnDataConstant.get(UNIT_GRUNT)
                firstSpawn = new UnitSpawnData(UNIT_GRUNT, ABILITY_TOGGLE_HEADHUNTER, spawnData.spawnPeriod, unitCounter(0, spawnData.unitCap))

            let opponentPos = vec2(initialSpawn.x * (-1), initialSpawn.y)
            new UnitSpawner(players[i], initialSpawn, OrderIds.attack, opponentPos)
               ..addUnitSpawner(firstSpawn)

    static function getUnitSpawner(player _player) returns UnitSpawner
        return playerToSpawnerMap.get(_player)

    var spawningPos = vec2(0, 0)
    player _player
    let unitToSpawnDataMap = new HashMap<int, UnitSpawnData>
    let abilToSpawnDataMap = new HashMap<int, UnitSpawnData>
    var autoSend = true
    ArmyHandler armyHandler = null

    construct(player _player, vec2 spawningPos, int order, vec2 orderPos)
        this._player = _player
        this.spawningPos = spawningPos
        this.armyHandler = new ArmyHandler(_player, order, orderPos)
        playerToSpawnerMap.put(_player, this)

    function spawnUnit(UnitSpawnData spawnData)
        if not spawnData.canSpawn()
            return
        let u = createUnit(this._player, spawnData.unitId, spawningPos, 270..asAngleDegrees())
        // issue special on spawn order (autocasting, ravenform...)
        if spawnData.getCurrentOrder() > 1
            u.issueImmediateOrderById(spawnData.getCurrentOrder())

        // If unit can take movement order on spawn
        if not armyHandler.isSpawnOrderDisabled(u.getTypeId())
            armyHandler.addUnit(u)
            if autoSend
                let order = armyHandler.spawnOrder
                if order == OrderIds.move or order == OrderIds.attack
                    u.issuePointOrderById(order, armyHandler.spawnOrderPos)
                else if order == OrderIds.smart
                    u.issueTargetOrderById(order, armyHandler.spawnOrderTarget)
                else
                    u.issueImmediateOrderById(order)


    // TODO: call update total counter
    function addUnitSpawner(UnitSpawnData spawnData)
        // TODO: check if those 2 hashmap store the same reference
        abilToSpawnDataMap.put(spawnData.abilId, spawnData)
        unitToSpawnDataMap.put(spawnData.unitId, spawnData)
        updateUnitCap(spawnData.spawnCounter.max)

        spawnUnit(spawnData)
        // TODO: add listener on ability cast
        doPeriodically(spawnData.period.toReal()) cb ->
            // if _player == players[0]
            //     print(unitToSpawnDataMap.get('hfoo').spawnCounter.current)
            //     print(spawnData.spawnCounter.current)
            spawnUnit(spawnData)
        EventListener.onCast(spawnData.abilId) (unit caster) ->
            if caster.getOwner() == _player
                this.toggleSpawn(spawnData.abilId)

    function removeUnit(UnitSpawnData spawnData)
        updateUnitCap(-spawnData.spawnCounter.max)

    function updateSpawningPos(vec2 pos)
        this.spawningPos = pos

    function updateUnitCounter(int unitTypeID, int value)
        unitToSpawnDataMap.get(unitTypeID).spawnCounter.current += value
        let currentUnitCount = _player.getState(PLAYER_STATE_RESOURCE_FOOD_USED)
        _player.setState(PLAYER_STATE_RESOURCE_FOOD_USED, currentUnitCount + value)

    function updateUnitCap(int value)
        let currentCap = _player.getState(PLAYER_STATE_RESOURCE_FOOD_CAP)
        _player.setState(PLAYER_STATE_RESOURCE_FOOD_CAP, currentCap + value)

    function toggleAutoSend()
        if autoSend
            autoSend = false
        else
            autoSend = true

    function toggleSpawn(int abilId)
        if abilToSpawnDataMap.has(abilId)
            let spawnData = abilToSpawnDataMap.get(abilId)
            let modeStr = spawnData.onToggle()
            print(modeStr)
            if modeStr == "OFF"
                removeUnit(spawnData)
            else if modeStr == "ON"
                updateUnitCap(spawnData.spawnCounter.max)
        else
            print("This isn't a spawnable unit")

    function getSpawnData(int abilId) returns UnitSpawnData
        return abilToSpawnDataMap.get(abilId)
