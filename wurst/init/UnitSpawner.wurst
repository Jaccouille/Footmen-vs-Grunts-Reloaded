package UnitSpawner

import Orders
import ClosureEvents
import HashMap
import ClosureTimers
import ClosureForGroups
import LinkedList

import Lodash

import PlayerExtension
import LocalObjectIDs

tuple unitCounter(int current, int max)

public class UnitSpawnData

    int unitId
    int abilId
    real period
    unitCounter spawnCounter = unitCounter(0, 0)
    let toggleOption = new LinkedList<Pair<string, int>>

    construct(int unitId, int abilId, real period, int unitLimit)
        this.unitId = unitId
        this.abilId = abilId
        this.period = period
        this.spawnCounter.max = unitLimit
        toggleOption.push(new Pair("ON", 1))
        toggleOption.push(new Pair("OFF", 0))

    function addSpawnOrder(string toDisplay, int orderId)
        let idx = toggleOption.size() - 1
        toggleOption.addAt(new Pair(toDisplay, orderId), idx)

    function onToggle() returns string
        let option = toggleOption.dequeue()
        toggleOption.push(option)
        return toggleOption.getFirst().a

    function getCurrentOrder() returns int
        return toggleOption.getFirst().b

    function canSpawn() returns boolean
        return (spawnCounter.current < spawnCounter.max and toggleOption.getFirst().a != "OFF")


public class UnitSpawner
    static let playerToSpawnerMap = new HashMap<player, UnitSpawner>

    static function initialize()
        for i = 0 to 9
            // if players[i].isIngame()
            let pData = players[i].getPlayerData()
            var initialSpawn = vec2(0, 0)
            UnitSpawnData firstSpawn = null

            if i < 5
                if pData.playerBuilding.has(UNIT_ALLIANCE_CASTLE)
                    initialSpawn = pData.playerBuilding.get(UNIT_ALLIANCE_CASTLE).getPos()
                firstSpawn = new UnitSpawnData('hfoo', 'x000', 1, 18)
                //print(initialSpawn.toString())
            if i >= 5
                initialSpawn = pData.playerBuilding.get(UNIT_HORDE_CASTLE).getPos()
                firstSpawn = new UnitSpawnData('ogru', 'x000', 1, 18)

            let opponentPos = vec2(initialSpawn.x * (-1), initialSpawn.y)
            new UnitSpawner(players[i], initialSpawn, OrderIds.attack, opponentPos)
               ..addUnitSpawner(firstSpawn)

    static function getUnitSpawner(player _player) returns UnitSpawner
        return playerToSpawnerMap.get(_player)

    var spawningPos = vec2(0, 0)
    var order = 0
    var orderPos = vec2(0, 0)
    player _player
    let unitToSpawnDataMap = new HashMap<int, UnitSpawnData>
    let abilToSpawnDataMap = new HashMap<int, UnitSpawnData>
    let armyOrderGroup = CreateGroup()
    let disabledOrderUnitId = new LinkedList<int>
    var autoSend = true

    construct(player _player, vec2 spawningPos, int order, vec2 orderPos)
        this._player = _player
        this.spawningPos = spawningPos
        this.order = order
        this.orderPos = orderPos
        playerToSpawnerMap.put(_player, this)

    function spawnUnit(UnitSpawnData spawnData)
        if not spawnData.canSpawn()
            return
        let u = createUnit(this._player, spawnData.unitId, spawningPos, 270..asAngleDegrees())
        // issue special on spawn order (autocasting, ravenform...)
        if spawnData.getCurrentOrder() > 1
            u.issueImmediateOrderById(spawnData.getCurrentOrder())

        // If unit can take movement order on spawn
        if not disabledOrderUnitId.has(u.getTypeId())
            armyOrderGroup.addUnit(u)
            if autoSend
                if order == OrderIds.move or order == OrderIds.attack
                    u.issuePointOrderById(order, orderPos)
                else
                    u.issueImmediateOrderById(order)


    // TODO: call update total counter
    function addUnitSpawner(UnitSpawnData spawnData)
        // TODO: check if those 2 hashmap store the same reference
        abilToSpawnDataMap.put(spawnData.abilId, spawnData)
        unitToSpawnDataMap.put(spawnData.unitId, spawnData)
        updateUnitCap(spawnData.spawnCounter.max)

        spawnUnit(spawnData)
        // TODO: add listener on ability cast
        doPeriodically(spawnData.period) cb ->
            // if _player == players[0]
            //     print(unitToSpawnDataMap.get('hfoo').spawnCounter.current)
            //     print(spawnData.spawnCounter.current)
            spawnUnit(spawnData)

    function removeUnit(UnitSpawnData spawnData)
        updateUnitCap(-spawnData.spawnCounter.max)

    function updateSpawningPos(vec2 pos)
        this.spawningPos = pos

    function updateOrder(int orderId)
        this.order = orderId
        armyOrderGroup.immediateOrderById(orderId)

    function updateOrder(int orderId, vec2 pos)
        this.order = orderId
        this.orderPos = pos
        armyOrderGroup.pointOrderById(order, pos)

    function updateUnitCounter(int unitTypeID, int value)
        unitToSpawnDataMap.get(unitTypeID).spawnCounter.current += value
        let currentUnitCount = _player.getState(PLAYER_STATE_RESOURCE_FOOD_USED)
        _player.setState(PLAYER_STATE_RESOURCE_FOOD_USED, currentUnitCount + value)

    function updateUnitCap(int value)
        let currentCap = _player.getState(PLAYER_STATE_RESOURCE_FOOD_CAP)
        _player.setState(PLAYER_STATE_RESOURCE_FOOD_CAP, currentCap + value)

    function updateOrderGroup(int unitId)
        if disabledOrderUnitId.has(unitId)
            disabledOrderUnitId.remove(unitId)
            printTimedToPlayer("Spawn ON", 4, _player)
        else
            disabledOrderUnitId.add(unitId)
            printTimedToPlayer("Spawn OFF", 4, _player)
        forUnitsOfPlayer(_player) (unit u) ->
            if u.getTypeId() == unitId
                if disabledOrderUnitId.has(unitId)
                    armyOrderGroup.removeUnit(u)
                else
                    armyOrderGroup.addUnit(u)

    function toggleAutoSend()
        if autoSend
            autoSend = false
        else
            autoSend = true

    function toggleSpawn(int abilId)
        if abilToSpawnDataMap.has(abilId)
            let spawnData = abilToSpawnDataMap.get(abilId)
            let modeStr = spawnData.onToggle()
            print(modeStr)
            if modeStr == "OFF"
                removeUnit(spawnData)
            else if modeStr == "ON"
                updateUnitCap(spawnData.spawnCounter.max)
        else
            print("This isn't a spawnable unit")

    function getSpawnData(int abilId) returns UnitSpawnData
        return abilToSpawnDataMap.get(abilId)

init
    EventListener.add(EVENT_PLAYER_UNIT_TRAIN_FINISH) ->
        let owner = EventData.getTriggerPlayer()
        let u = EventData.getTriggerUnit()
