package UnitSpawner

import HashMap
import UnitSpawnData
import ClosureTimers
import PlayerData
import PlayerExtension
import LocalObjectIDs
import Orders
import ArmyHandler
import GameConstants

let playerToSpawnRect = new HashMap<player, rect>
    ..put(players[0], gg_rct_Spawner_0)
    ..put(players[1], gg_rct_Spawner_1)
    ..put(players[2], gg_rct_Spawner_2)
    ..put(players[3], gg_rct_Spawner_3)
    ..put(players[4], gg_rct_Spawner_4)
    ..put(players[5], gg_rct_Spawner_5)

let spawnOffset = vec2(3500, 0)

public class UnitSpawner
    static let playerToSpawnerMap = new HashMap<player, UnitSpawner>

    static function initialize()
        for i = 0 to NBR_USER_PLAYER
            // TODO: check player isingame
            // if players[i].isIngame()
            let pData = players[i].getPlayerData()

            let pCastle = players[i].isAlliance() ? UNIT_ALLIANCE_CASTLE : UNIT_HORDE_CASTLE
            let initialSpawn = pData.playerBuilding.get(pCastle).getPos()

            let opponentPos = vec2(initialSpawn.x * (-1), initialSpawn.y)
            new UnitSpawner(players[i], initialSpawn, OrderIds.attack, opponentPos)

    static function getUnitSpawner(player _player) returns UnitSpawner
        return playerToSpawnerMap.get(_player)

    var spawningPos = vec2(0, 0)
    rect templateRect
    player _player
    var autoSend = true
    ArmyHandler armyHandler = null
    let groupTemplate = new IterableMap<unit, int>
    // let unitToSpawnDataMap = new IterableMap<int, UnitSpawnData>
    let unitCounter = new HashMap<int, int>()

    construct(player _player, vec2 spawningPos, int order, vec2 orderPos)
        this._player = _player
        this.spawningPos = spawningPos
        this.templateRect = gg_rct_Spawner_0
        this.armyHandler = new ArmyHandler(_player, order, orderPos)
        playerToSpawnerMap.put(_player, this)

    function addUnitSpawner(int unitId)
        addUnitSpawner(unitId, playerToSpawnRect.get(this._player).getCenter())

    function addUnitSpawner(int unitId, vec2 pos)
        if not unitCounter.has(unitId)
            unitCounter.put(unitId, 0)
            updateMaxUnitCap(spawnDataConstant.get(unitId))
        // Add unit to spawner rect
        let angle = (this._player.isHorde() ? 180 : 0).asAngleDegrees()
        groupTemplate.put(createUnit(this._player, unitId, pos, angle)..addAbility('Avul'), 0)

    function updateMaxUnitCap(int value)
        let currentCap = _player.getState(PLAYER_STATE_RESOURCE_FOOD_CAP)
        _player.setState(PLAYER_STATE_RESOURCE_FOOD_CAP, currentCap + value)

    /***
        Iterate over units from wave/group template and spawn them on the battlefield
    ***/
    function spawnUnit()
        this.groupTemplate.forEach() (unit template, integer activeAbil) ->
            if this.canSpawn(template)
                and not template.isPaused()

                let pos = template.getPos() + spawnOffset * (this._player.isHorde() ? -1 : 1)
                updateUnitCounter(template, 1)
                let u = createUnit(this._player, template.getTypeId(), pos, 270..asAngleDegrees())
                if activeAbil != 0
                    u.issueImmediateOrderById(activeAbil)

                // If unit can take movement order on spawn
                if not armyHandler.isSpawnOrderDisabled(u.getTypeId())
                    armyHandler.addUnit(u)
                    if autoSend
                        let order = armyHandler.spawnOrder
                        if order == OrderIds.move or order == OrderIds.attack
                            u.issuePointOrderById(order, armyHandler.spawnOrderPos)
                        else if order == OrderIds.smart
                            u.issueTargetOrderById(order, armyHandler.spawnOrderTarget)
                        else
                            u.issueImmediateOrderById(order)

    function updateUnitCounter(unit u, int value)
        let currentCount = unitCounter.get(u.getTypeId())
        unitCounter.put(u.getTypeId(), currentCount + value)
        let currentUnitCount = _player.getState(PLAYER_STATE_RESOURCE_FOOD_USED)
        _player.setState(PLAYER_STATE_RESOURCE_FOOD_USED, currentUnitCount + value)

    function canSpawn(unit u) returns boolean
        let currentCount = unitCounter.get(u.getTypeId())
        return currentCount < spawnDataConstant.get(u.getTypeId())

    function toggleSpawn(int abilId)

    function countTemplateUnitId(int unitId) returns int
        int count = 0
        for u in groupTemplate
            if u.getTypeId() == unitId
                count += 1
        return count


init
    // TODO: Spawn basic units upon race selection
    doPeriodically(5) (CallbackPeriodic cb) ->
        for i = 0 to NBR_USER_PLAYER
            UnitSpawner.getUnitSpawner(players[i]).spawnUnit()
